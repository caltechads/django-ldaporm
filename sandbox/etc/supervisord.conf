[supervisord]
user=app
nodaemon=true
logfile=/dev/stdout
logfile_maxbytes=0
pidfile=/tmp/supervisord.pid

[program:gunicorn]
command=gunicorn -c python:demo.gunicorn_config demo.wsgi
user=app
directory=/app
# Redirect gunicorn's stdout/stderr to supervisor's stdout file descriptor. Without this, the fact that gunicorn is a
# child process of supervisord would mean that its output doesn't get forwarded to the docker log. This is necessary
# for every child process.
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

[program:nginx]
user=app
command=/usr/sbin/nginx -c /etc/nginx/nginx.conf
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

# This enables the use of the supervisorctl program to manage supervisord's processes.
# Exec into the container and use commands like `supervisorctl restart gunicorn` to restart the gunicorn process.
[supervisorctl]
serverurl=unix:///tmp/supervisord.sock
# supervisorctl isn't accessible from outside the server (since it's running on a socket), but supervisord will throw a
# CRITICAL error message if these aren't specified. See https://github.com/Supervisor/supervisor/issues/717
username = dummy
password = dummy

[unix_http_server]
file=/tmp/supervisord.sock
username = dummy
password = dummy

[rpcinterface:supervisor]
supervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface

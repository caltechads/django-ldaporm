[project]
name = "django-ldaporm"
version = "1.2.0"
description = "A Django ORM-like interface for ldap objectclasses"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Caltech IMSS ADS", email = "imss-ads-staff@caltech.edu"}
]
keywords = ["django", "ldap"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "Natural Language :: English",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
dependencies = [
    "pytz>=2019.3",
    "ldap_filter>=0.2.2",
    "python-ldap>=3.2.0",
    "pyasn1>=0.6.1",
    "asn1>=3.1.0",
]

[project.urls]
Homepage = "https://github.com/caltechads/django-ldaporm"
Documentation = "https://django-ldaporm.readthedocs.io/en/latest/"
Issues = "https://github.com/caltechads/django-ldaporm/issues"

[tool.uv]
python-preference = "only-system"
default-groups = ["docs", "test"]

[dependency-groups]
dev = [
    "ipython>=7.13.0",
    "django-stubs>=5.1.1",
    "build>=1.2.2.post1",
    "wheel>=0.38.0",
]
test = [
    "testfixtures>=6.10.0",
    "mock>=3.0.5",
    "nose>=1.3.7",
    "unittest-xml-reporting>=3.0.4",
    "coverage>=5.0.3",
    "django-coverage-plugin>=1.8.0",
    "factory-boy>=2.12.0",
    "pytest>=8.4.1",
    "python-ldap-faker>=1.2.1",
]
docs = [
    "sphinx<=7",
    "sphinx-rtd-theme>=2.0.0",
    "sphinxcontrib-django>=2.5",
    "sphinxcontrib-images>=0.10.0",
]
demo = [
    "crispy-bootstrap5>=2024.10",
    "django>=4.2",
    "django-braces>=1.15.0",
    "django-crispy-forms>=2.3",
    "django-extensions>=3.2.3",
    "django-compressor>=4.5.1",
    "django-crequest>=2018.5.11",
    "django-debug-toolbar>=4.4.2",
    "django-filter>=25.1",
    "drf-spectacular>=0.28.0",
    "django-environ>=0.11.2",
    "django-sass-processor>=1.4.1",
    "django-theme-academy>=0.3.11",
    "django-wildewidgets>=1.1.0",
    "django-xff>=1.3.0",
    "gunicorn >= 22.0.0",
    "ipython>=7.27.0",
    "libsass>=0.23.0",
    "mysqlclient>=2.2.6",
    "redis>=5.2.1",
    "structlog>=24.2.0",
    "tabulate>=0.9.0",
    "djangorestframework>=3.16.0",
]

[build-system]
requires = [
    "setuptools >= 48",
    "wheel >= 0.29.0",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
exclude = ["bin"]

[tool.setuptools.package-data]
ldaporm = ["py.typed"]

[tool.mypy]
exclude = "(^build/.*$|^docs/.*\\.py$|test_.*\\.py$)"
# Django has a lot of magic that makes attributes appear after instance instantiation,
# so we need to disable this check.
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "setuptools.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "ldap.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "ldap_filter.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytz.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "environ.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "wildewidgets.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sphinx_rtd_theme.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "debug_toolbar.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "crispy_forms.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "braces.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "structlog.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rest_framework.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "crispy_bootstrap5.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "django_filter.*"
ignore_missing_imports = true

[tool.basedpyright]
python_version = "3.10"
typeCheckingMode = "off"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py310"
exclude = [".venv", "build", "dist", "*/tests*", "*/migrations/*"]

[tool.ruff.lint]
select = ["ALL"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore = [
    #### modules
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "TID", # flake8-tidy-imports

    #### specific rules
    "CPY001",   # ignore missing copyright notices
    "D100",     # Missing docstring in public module
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D106",     # Missing docstring in nested class
    "D107",     # ignore Missing docstring in __init__ method
    "D203",     # 1 blank required before class docstring
    "D200",     # One-line docstring should fit on one line
    "D205",     # 1 blank line required between summary line and description
    "D212",     # Multi-line docstring summary should start at the first line
    "D400",     # First line should end with a period
    "D401",     # First line of docstring should be in imperative mood
    "D415",     # First line should end with a period, question mark, or exclamation point
    "DOC201",   # Ignore missing "Return" section in docstring
    "E402",     # false positives for local imports
    "FIX002",   # Line contains "TODO", consider resolving the issue
    "N818",     # stop bugging me about not ending my exceptions with "Error"
    "PLC0415",  # Ignore imports that aren't at the top level. Sometimes that's needed to avoid circular imports.
    "S603",     # ignore subprocess calls that do not check return code
    "S607",     # ignore subprocess programs that are not absolute paths
    "SIM102",   # combine nested ifs
    "SLF001",   # Ignore access to attributes starting with a single _. Django's Model._meta is used all over the place.
    "TD002",    # Missing author in TODO; try: # TODO(<author_name>): ... or # TODO @<author_name>:
    "TD003",    # Missing issue link on the line following this TODO
    "FBT001",   # stop bugging me about booleans in function signatures
    "FBT002",   # stop bugging me about booleans in function signatures
    "PT009",    # use regular assert instead of unittest asserts
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Disable auto-formatting of code examples in docstrings
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pylint]
# Django signal handlers use a lot of positional args.
max-args = 10
max-positional-args = 10

[tool.ruff.lint.per-file-ignores]
"**/test_*.py" = ["D101", "D102", "N802"]
